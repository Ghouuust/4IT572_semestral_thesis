- name: Deploy to EC2
  hosts: localhost
  connection: local
  vars:
    access_key: "{{ lookup('env', 'ACCESS_KEY') }}"
    secret_key: "{{ lookup('env', 'SECRET_KEY') }}"
    session_token: "{{ lookup('env', 'SESSION_TOKEN') }}"
    #current_time: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"

  tasks:
    - name: Launch EC2 Instance
      ec2_instance:
        instance_type: t2.medium
        image_id: ami-04e5276ebb8451442
        region: us-east-1
        key_name: Test
        vpc_subnet_id: subnet-0bb7b3aa91dcdcb90
        tags:
          Name: Eshop
          #DeploymentTime: "{{ current_time }}"
        network:
          assign_public_ip: yes
        wait: yes
        count: 1
        security_group: eshop
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
      register: ec2_instance_result

    - name: Add instance host to group
      add_host:
        hostname: "{{ item.public_ip_address }}"
        groupname: launched
      loop: "{{ ec2_instance_result.instances }}"

    - name: Wait for SSH connection
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        delay: 30
        timeout: 300
      loop: "{{ ec2_instance_result.instances }}"

- name: Configure EC2 Instances
  hosts: launched
  connection: ssh
  become: yes
  vars:
    ansible_user: ec2-user

  tasks:
    - name: Install Git and Docker
      yum:
        name:
          - git
          - docker
        state: latest
        update_cache: yes
    - service:
        name: docker
        state: started
        enabled: yes
    - name: Set proper rights to Docker service
      shell: usermod -a -G docker ec2-user

    - name: Fetch eshop from Git
      git:
        repo: "https://github.com/Ghouuust/4IT572_semestral_thesis.git"
        dest: ./app

    - name: Build Eshop Docker image
      docker_image:
        build:
          path: ./app
        name: eshop
        tag: latest
        source: build
    - name: Run Eshop Docker
      docker_container:
        name: eshop
        image: eshop
        state: started
        ports:
          - "80:3000"

    - name: Wait for eshop to run
      wait_for:
        port:
          80

- name: Delete old EC2 instances
  hosts: localhost
  connection: local
  vars:
    access_key: "{{ lookup('env', 'ACCESS_KEY') }}"
    secret_key: "{{ lookup('env', 'SECRET_KEY') }}"
    session_token: "{{ lookup('env', 'SESSION_TOKEN') }}"
    #current_time: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
  tasks:
    - name: Gather facts about all EC2 instances named Eshop
      ec2_instance_info:
        filters:
          "tag:Name": "Eshop"
        region: us-east-1
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
      register: ec2_facts

    - name: Terminate old EC2 instance named Eshop
      ec2_instance:
        state: absent
        instance_ids: "{{ item.instance_id }}"
        region: us-east-1
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
      loop: "{{ ec2_facts.instances }}"
      when: "item.instance_id != ec2_instance_result.instance_ids[0]"
      failed_when: "item.instance_id == ec2_instance_result.instance_ids[0]"
      #with_items: "{{ ec2_facts.instances }}"
      #failed_when: "item.instance_id = ec2_instance_result"
      #loop: "{{ ec2_facts.instances }}"
      #when: "item.tags.DeploymentTime < current_time"
      #failed_when: "item.tags.DeploymentTime == current_time"


